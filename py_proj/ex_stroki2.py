# -*- coding: utf-8 -*-
__author__ = 'admin'
import string
#Строки
#Строки - счёт символов с нуля

s="одна строка"
s+=" вторая строка"
print "s=одна строка s+= вторая строка:",s

#Обрезка пробелов с краев
print "'str  '.strip()+'ing':",'str  '.strip()+'ing'

#Обрезка пробелов слева и справа
print "str('  str  '.rstrip()).lstrip():",str('  str  '.rstrip()).lstrip()

#Юникод строка u"строка"
s=u"строка"

#подстрока
print s
print "Первый символ s[0]:",s[0]                #Первый символ
print "все символы до 1го s[:1]:",s[:1]         #все символы до 1го
print "все символы после 1го s[1:]:",s[1:]      #все символы после 1го
print "все символы до 1го с конца s[:-1]:",s[:-1]    #все символы до 1го с конца
print "все символы после 1го с конца s[-1:]:",s[-1:]    #все символы после 1го с конца
print "все символы с 0 по 4 с шагом через 2 символа s[0:4:2]:",s[0:4:2]  #все символы с 0 по 4 с шагом через 2 символа
#Если диапазон выходит за пределы то возвращается пустая строка,
#или диапазон урезается до длины строки

#Длина строки
print "Длина строки len(s):",len(s)

#Количество вождений подстроки в строку
s="str1 str2 str1 str2"
print "Количество вождений подстроки в строку s.count('str1'):",s.count("str1")

#Возвращает 1 если строка s[start:end] заканчивается на suffix, иначе 0
suffix="strend"
s="sdfsdfsd strend"
print "Возвращает 1 если строка заканчивается на suffix s.endswith(suffix):",s.endswith(suffix)

#Возвращает True если строка начинается с префикса
print "Возвращает True если строка начинается с префикса s.startswith('two'):",s.startswith('two')

#Возвращает индекс первого символа первого вхождения подстроки
s="two sdfsdfsd one sddsfsd"
#s.find("one",start,end)
print "Возвращает индекс первого символа первого вхождения подстроки s.find('one'):",s.find("one")

#поиск справа, первое вхождение справа
print "поиск справа, первое вхождение справа s.rfind('one'):",s.rfind("one")

#тоже что и find только если подстрока не найдена выдается исключение
print "тоже что и find только если подстрока не найдена выдается исключение, s.index('one'):",s.index('one')

#индекс справа
print "индекс справа s.rindex('one'):",s.rindex('one')

#Заменяет все символы табуляции заданным количеством пробелов, по умолчанию 1таб=8 пробелов
s="s1\ts2\ts3"
s="Заменяет все символы табуляции заданным количеством пробелов s.expandtabs(10):",s.expandtabs(10)
print s

#Переделывает подстроку на новую
s="one asdfsfsdf one"
#s.replace('one','two')#,count) заданное количество раз
print "Переделывает подстроку на новую s.replace('one','two'):",s.replace('one','two')

#Не для Unicode строк
#Возвращает копию строки, в которой все символы, указанные в строке delchars
#удалены, а для оставшихся произведена замена по таблице символов
#(строке в 256 символов).
table=""
i=0
k=0
while i<256:
    table+=str(k)
    i=i+1
    k+=1
    if k==10:
        k=0
print "table:",table
s="string 123456789"
print "Замена символов по новой таблице символов s.translate(table):",s.translate(table)

s=u'строка юникода'
#s=s.encode('utf8')#кодировка строки в заданную кодовую страничку
#кодировка строки в заданную кодовую страничку
print "кодировка строки в заданную кодовую страничку s.encode('cp1251'):",s.encode('cp1251')
s=s.encode('cp1251')

#декодирование из заданной кодировки
print "декодирование из заданной кодировки s.decode('cp1251'):",s.decode('cp1251')

#Объединение массива из только строковых элементов в 1 строку
#если попадется не строка получишь ислючение
seq=['one','two','three']
s=""
print "Объединение массива из только строковых элементов в 1 строку s.join(seq):",s.join(seq)

#Разбиение строки разделителем \n на последовательность
s="one\ntwo\nthree"
print "Разбиение строки разделителем \\ n на последовательность s.splitlines():",s.splitlines()

#Если строка содержит только цифры вернет 1
s="01234"
print "Если строка содержит только цифры вернет 1 s.isdigit():",s.isdigit()

#Если строка содержит только пустоты, пробел перевод строк табуляция
s="  \t\n  "
print "Если строка содержит только пустоты, пробел перевод строк табуляция s.isspace()",s.isspace()

#Если все символы в строке записаны в верхнем регистре
s="AAA"
print "Если все символы в строке записаны в верхнем регистре s,s.isupper():",s,s.isupper()

#Если слова в предложении начинаются с заглавных букв
s="Aaa Fff"
print "Если слова в предложении начинаются с заглавных букв s,s.istitle():",s,s.istitle()

#не для юникода
s="strING"
#Приведение к нижнему/верхнему регистру
print "Приведение к нижнему/верхнему регистру s.lower():",s.lower()

#Приведение к нижнему/верхнему регистру
print "Приведение к нижнему/верхнему регистру s.upper():",s.upper()

#Для строк Unicode
#вернёт 1 если в строке только десятичные цифры (не только из ascii)
s=u"2344"
print "вернёт 1 если в строке только десятичные цифры (не только из ascii) s.isdecimal():",s.isdecimal()

#вернёт 1 если в строке только числа в том числе и римские
s=u"123"
print "вернёт 1 если в строке только числа в том числе и римские s.isnumeric():",s.isnumeric()

#Разбиение строки сепаратором
s=u"строка1#строка2"
print "Разбиение строки сепаратором s.split('#')[0],s.split('#')[1]",s.split("#")[0],s.split("#")[1]

s=u"строка1. строка2"
#Строка начнется с заглавное буквы
print "Строка начнется с заглавное буквы s.capitalize():",s.capitalize()

#замена подстрок
print "замена подстрок s.replace('.',','):",s.replace(".",",")

#Реальная обрезка строки
st=u"строка"
print "Реальная обрезка строки st.ljust(2)[0:2]:", st.ljust(2)[0:2]

#Умное Заполнение числа нулями слева
#7-длина всей строки
print "Умное Заполнение числа нулями слева 7-длина всей строки string.zfill('-3.14',7):",string.zfill('-3.14',7)

#перенос физических строк \ формирует логическую строку
s="Физическая строка 1 \
Физическая строка 2\
Физическая строка 3"
print s

print "a\nb" #Перевод строки
print "\\" #Символ слеша
print "\'" #Одинарная кавычка
print "\"" #Двойная кавычка
print "\a" #Символ оповещения BEL
print "\b" #Символ возврата на одну позицию
print "\f" #Символ подачи страницы
print "\n" #Символ перехода на новую строку
print "\r" #Символ возврата каретки
print "\t" #Символ табуляции
print "\v" #Символ вертиальной табуляции
print "\0340" #Символ с восьмеричным кодом
print "\x0B" #Символ с шестнадцетиричным кодом

#Вывод на экран
i=10
f=1.1
s="строка"
c='в'
print '%s %.3f %d %c %u %o %x %X %e %f %F %g %%' %(s,f,i,i,i,i,i,i,f,f,f,f)
"""
s	Строковый
r	Строковый, но с использованием repr, а не str
c	Посимвольный
d	Десятичный
i	Целый
u	То же, что и d (no longer unsigned)
o	Восьмеричный
x	Шестнадцатеричный
X	Шестнадцатеричный в верхнем регистре
e	Floating-point exponent, нижний регистр
E	То же, что и e, но в верхнем регистре
f	Floating-point decimal
F	Floating-point decimal
g	Floating-point e или f
C	Floating-point E или F
%	Символьный %
"""

#string -Модуль строк
import string
#Десятичные цифры в зависимости от национальных установок
print string.digits
#Шестнадцетиричные цифры в зависимости от национальных установок
print string.hexdigits
#Буквы ascii
print string.letters
#Восьмеричные цифры в зависимости от национальных установок
print string.octdigits
#Знаки припенания
print string.punctuation
#Печатные символы
print string.printable
#Символы в нижнем регистре
print string.lowercase
#Символы в верхнем регистре
print string.uppercase
#Пробелы
print string.whitespace
#Умножение символа на число
print "-"*40
#Возвращает хэш числа/строки и т д
x='123'
y='123'
print 'hash=hash(123),hash(123):',hash(x),hash(y)
#Вернёт символ по коду
print chr(40)
print unichr(40)
#Вернёт код по символу
print ord('0')
