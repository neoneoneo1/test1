# -*- coding: utf-8 -*-
__author__ = 'admin'

#Последовательность
s=[1,2,3,4]
print s

#Массивы могут состоять из разнотипных элементов
s=[100,200,"триста","четыреста"]

#Добавление
s.append(5)
print "Добавление s.append(5):",s

#Замена значений в последовательности,
#Удаление элементов последовательности
s=[123,456,789]
s[0]=321
del s[2]
print s

#Добавление последовательности в последовательность
s.extend(s)
print "Добавление последовательности в последовательность s.extend(s)",s

#Возвращает элемент последовательности и удаляет его
s=[1,2,3,4]
x=s.pop(0)
print "Возвращает элемент последовательности и удаляет его x=s.pop(0):",x,s

#Удаляет из списка первый элемент с заданным значением
s=[1,2,3,4]
s.remove(2)
print "Удаляет из списка первый элемент с заданным значением s.remove(2):",s

#Развернуть значения в последовательности
s.reverse()
print "Развернуть значения в последовательности s.reverse()",s

#Вставка в заданную позицию
a=[1,2,3,4]
a.insert(0,100)
print "Вставка в заданную позицию a.insert(0,100):",a

#Удаление заданного значения
a.remove(1)
#не может удалить вставленный элемент a.remove(0)
print "Удаление заданного значения a.remove(1):",a

#Возвращает индекс элемента с заданным значением
a=[1,2,3,4,"два"]
print "Возвращает индекс элемента с заданным значением a.index(2):",a.index('два')

#Возвращает количество элементов с заданным значением
a=[1,2,3,4,2]
print "Возвращает количество элементов с заданным значением a.count(2):",a.count(2)

#Возвращает количество вхождений элемента в список
aaa=[1,1,2,3,4,1]
print "Возвращает количество вхождений элемента в список aaa.count(1):",aaa.count(1)

#Развернуть список
print "Развернуть список aaa.reverse():",aaa.reverse()

#Сортировка списка (по дефолту по возрастанию)
aaa.sort()
print "Сортировка списка (по дефолту по возрастанию) aaa.sort():",aaa

#Выщелкивание с конца как в стеке
print "Выщелкивание с конца как в стеке aaa.pop():",aaa.pop()

#Количество элементов списка
print "Количество элементов списка len(s):",str(len(s))

#Замена до 2го элемента не включительно списком других значений
s[0:2]=[3,3]
print "Замена до 2го элемента не включительно списком других значений s[0:2]=[0,0]:",s

#Вставка элементов в 1ю позицию
s[1:1]=[1,2,3]
print "Вставка элементов в 1ю позицию s[1:1]=[1,2,3]:",s

#Вывести элементы
print "Вывести элементы for iter in s: print iter:"
for iter in s:
    print iter

#Удалить некоторые элементы
s[1:2]=[]
for iter in s:
    print iter
print "Удалить некоторые элементы for iter in s: print iter:",s

#Удалить все элементы
s[0:]=[]
print "Удалить все элементы s[0:]=[]:",s

#Вставить копию самого себя в начало
s=[1,1,2,3,4,1]
s[0:]=s
print "Вставить копию самого себя в начало",s

#Списки содержащие другие списки
fam=["Иванов","Петров","Сидоров"]
fam1=["Иванов1","Петров1","Сидоров1"]
group=[fam,fam1,"строка",1]
print "Списки содержащие другие списки group=[fam,fam1,'строка',1]:",group

#q лишь ссылка на список и содержимое там меняется (как указатель)
q=group[1]
print len(q)
print group[1][1]
print "q лишь ссылка на список и содержимое там меняется (как указатель) q=group[1] len(q):",len(q)

#Добавление в список
group[1].append("Свиридов1")
print "Добавление в список group[1].append('Свиридов1'):",group
print group[1][3]

#Создаем копию последовательности a чтоб вложенный цикл не покалечил внешний
#И перебираем ту же последовательность даже изменяя её
#Просто храниться она будет в 2х местах
print "Создаем копию последовательности a чтоб вложенный цикл не покалечил внешний:"
a=['1','2','3','4','5']
b=a[:]
a.append(b)
for x in a[:]:
    if len(x) > 4:
        a.insert(0, x)
        for x in a:
            print x

#Создание списка (0-100 включительно) изменяемого (range(начало конец и шаг))
#и неизменяемого (xrange)
print "Создание списка (0-100 включительно) изменяемого (range(начало конец и шаг)):"
s=range(0,101,10)
print s

#Перебор по индексам (сложновато)
print "Перебор по индексам (сложновато):"
a = ['У', 'Марии', 'Есть', 'Маленькая', 'Овечка']
for i in xrange(len(a)):
    print i, a[i]

#Можно перебирать несколько последовательностей одновременно
#и получать из двух списков словарь (ключ->значение)
#Если какая то последовательность кончиться раньше
#то вместо ней будут идти None
seq1=['cat','mouse','bird']
seq2=['кот','мышь','птица','лошадь','две кошки']
print "Можно перебирать несколько последовательностей одновременно for x,y in map(None,seq1,seq2):"
for x,y in map(None,seq1,seq2):
    print x,y


#Если несколько for то элементы второй последовательности y
#перебираются для каждого элемента первой последовательности x
#1+1 1+2 1+3
#2+1 2+2 2+3
#3+1 3+2 3+3
vec1=[1,2,3]
vec2=[1,2,3]
spis1=[x+y for x in vec1 for y in vec2]
print "Если несколько for то элементы второй последовательности y\n\
перебираются для каждого элемента первой последовательности x\n\
spis1=[x+y for x in vec1 for y in vec2]",spis1



#Удаление элемента не только по значению но и по индексу, диапазону индексов
a=[1,2,3,4,5,6,7,8,9]
print "Удаление элемента не только по значению но и по индексу, диапазону индексов del a[0] del a[1:3]:"
del a[0]
print a
del a[1:3]
print a

#Удаление a совсем и при попытке обратиться к a должно генериться исключение
print "Удаление a совсем и при попытке обратиться к a должно генериться исключение del a",a
del a
#print a+1 - будет исключение

#Выражения в обратных кавычках и скобках (круглых, квадратных, фигурных)
#Могут быть разделены на несколько физических строк без символа \
ss=['sdf',
'dffgd',
'dfgdgd']

#Дополнительные возможности создания список с Python 2.0
#Пример последовательность в список
posledovatelnost=['  one  ','  two','three  ']
spis1=[x.strip() for x in posledovatelnost]
print spis1

a=list(xrange(10))
print "a=list(xrange(10)):",a

#map можно применять в нескольким последовательностям или делать вложенным
seq=xrange(8)
def sq(x):
    return x*x
#Возвращает пары
list1=map(None,seq,map(sq,seq))
print list1

#Функция zip желает тоже что map только возвращает список по длине
#самой короткой последовательности, и zip не имеет функции
for x,y in zip(seq1,seq2):
    print x,y

#Список пар в ключ-значение и назад, действия обратимы
seq1=xrange(5)
seq2=xrange(5)
x=zip(seq1,seq2)
print x
y=zip(*x) #apply (zip,x)
print y
z=zip(*y)
print z

#возвращает список из последовательности или строки
print list('string1')
print list([1,2,3,4])
